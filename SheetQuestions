Easy:

Arrays:

Maximum & Minimum Element in an Array - Done
    input: arr = [22, 14, 8, 17, 35, 3]
    output: { min: 3, max: 35 }

Reverse the Array 
    - Array Reverse Using an Extra Array (Non In-place) - Done
    - Array Reverse Using a Loop (In-place) - Done
    - Array Reverse Inbuilt Methods (In-place) - Done
    - Array Reverse Recursion (In-place or Non In-place) - Done
    - Array Reverse Stack (Non In-place) - Done
    input: arr = [4, 5, 1, 2]
    outPut: [2, 1, 5, 4]

Maximum Subarray Sum - Done
    input: arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    output: 6

Contains Duplicate - Done
    input: arr = [1, 2, 3, 1]
    output: true

Chocolate Distribution Problem - Done
    input: arr = [7, 3, 2, 4, 9, 12, 56], m = 3
    output: 2

Search in Rotated Sorted Array - Done
    input: arr = [4, 5, 6, 7, 0, 1, 2]
    output: 4


Strings:

Valid Palindrome - Done
    input: str = 'A man, a plan, a canal: Panama'
    output: true

Valid Anagram - Done
    input: s = "anagram", t = "nagaram"
    output: true

Valid Parentheses - Done
    input: str = "()[]{}"
    output: true

Remove Consecutive Characters - Done
    input: str = 'aabaa'
    output: aba

Longest Common Prefix - Done
    input: strs = ["flower","flow","flight"]
    output: "fl"

Convert a sentence into its equivalent mobile numeric keypad sequence - Done
    input: GEEKSFORGEEKS
    output: 4333355777733366677743333557777

Print all the duplicate characters in a string - Done
    input: S = “geeksforgeeks”
    output: e, count = 4
            g, count = 2
            k, count = 2
            s, count = 2

Searching & Sorting:

Permute two arrays such that sum of every pair is greater or equal to K - Done
    input:  a = [2, 1, 3],          input:  a = [1, 2, 2, 1], 
            b = [ 7, 8, 9 ],                b = [3, 3, 3, 4],
            k = 10                          k = 5
    output: true                    output: false

Find common elements in three sorted arrays - Done
    input: A = [1, 5, 10, 20, 30] , B = [5, 13, 15, 20], C = [5, 20]
    output: [5, 20] 

Counting Sort - Done
    input: arr = [4, 2, 2, 8, 3, 3, 1]
    output: [1, 2, 2, 3, 3, 4, 8]

Searching in an array where adjacent differ by at most k  - Done
    input: arr = [4, 5, 6, 7, 6], k = 1, x = 6
    output: 2

Find Ceiling in a sorted array - Done
    input: arr = [1, 2, 8, 10, 10, 12, 19], key = 5
    output: 8

Find a pair with the given difference - Done
    input: [5, 20, 3, 2, 50, 80], diff = 78
    output: [80, 2]

Linked List:

Reverse Linked List - Done
    input: 1->2->3->4->5
    output: 5->4->3->2->1

Linked List Cycle - Done
    input: 1->2->3->1
    output: true

Merge Two Sorted Linked List - Done
    input: list1 = 1->3->4, list2 = 1->2->4
    output 1->1->2->3->4->4

Given only a pointer/reference to a node to be deleted in a singly linked list, how do you delete it? / Delete without head node - Done
    input: 1->2->3->4, nodeToBeDeleted = 2
    output: 1->3->4

Remove Duplicates from an Unsorted Linked List - Done
    input: linked_list = 12 -> 11 -> 12 -> 21 -> 41 -> 43 -> 21 
    output: 12 -> 11 -> 21 -> 41 -> 43 

Stacks & Queues:

Implement two Stacks in an Array - Done
    input:  push1(5)
            push1(10)
            push2(15)
            push2(20)

            pop1()
            pop2();

            Stack 1: 5 10
            Stack 2: 20 15

    output: Stack 1: 5
            Stack 2: 15

Evaluation of Postfix Expression - Done
    input: str = "231*+9-"
    output: -4

Queue Reversal - Done
    input: queue = [1, 2, 3, 4, 5]
    output: [5, 4, 3, 2, 1]

Reverse First K elements of Queue - Done
    input: queue = [1, 2, 3, 4, 5], k = 3
    output = [3, 2 , 1, 4, 5]

Greedy:

Activity Selection Problem - Done
    input: startTimes = [1, 3, 0, 5, 8, 5], endTimes = [2, 4, 6, 7, 9, 9]
    output: [ [ 1, 2 ], [ 3, 4 ], [ 5, 7 ], [ 8, 9 ] ]

Greedy Algorithm to find Minimum number of Coins - Done
    input: 70
    output: [50, 20], 2

Minimum sum of two numbers formed from digits of an array - Done
    input: [6, 8, 4, 5, 2, 3]
    output: 604

Minimum sum of absolute difference of pairs of two arrays - Done
    input: arr1 = [3, 2, 1], arr2 = [2, 1, 3]
    output: 0

Find maximum height pyramid from the given array of objects - Done
    input: weights = [10, 20, 30, 50, 60, 70]
    output: Max height 3

Find maximum equal sum of every three stacks - Done
    input:  stack1 = [3, 2, 1, 1, 1];
            stack2 = [4, 3, 2];
            stack3 = [1, 1, 4, 1];
    output: 5

Bit Manipulation: 

Number of 1 Bits - Done
    input: N = 6
    output: 2

Non Repeating Numbers - Done
    input: arr = [1, 2, 3, 2, 1, 4]
    Output: 3 4 

Graph:

BFS - Done
    input:  V = 5;
            adj = [
                [1, 2, 3],
                [],        
                [4],      
                [],      
                []        
            ];
    output: 0 1 2 3 4

DFS - Done
    input:  V = 5;
            edges = [
                [1, 2],
                [1, 0],
                [0, 2],
                [2, 3],
                [2, 4]
            ];
            source = 1;
    output: Output: 1 2 0 3 4

Number of Triangles in Directed and Undirected Graphs - Done
    input: adjDirected = [
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [1, 0, 0, 1],
                            [0, 0, 0, 0]
                        ];
    output: 1

    input: adjUndirected = [
                                [0, 1, 1, 0],
                                [1, 0, 1, 1],
                                [1, 1, 0, 1],
                                [0, 1, 1, 0]
                            ];
    output: 2

Flood Fill - Done
    input:  image = [
                        [1, 1, 1],
                        [1, 1, 0],
                        [1, 0, 1]
                    ];
            sr = 1, sc = 1, newColor = 2;
    output: [ [ 2, 2, 2 ], [ 2, 2, 0 ], [ 2, 0, 1 ] ]

Binary Trees:

Maximum Depth of Binary Tree - Done
    input: root = [3, 9, 20, null, null, 15, 7]
    output: 3

Reverse Level Order Traversal - Done
    input: [1, 3, 2]
    output: [3, 2, 1]

Subtree of Another Tree - Done
    input: root: [3, 4, 5, 1, 2], subRoot: [4, 1, 2]
    output: true

Same Tree - Done
    input: p: [1, 2, 3], q: [1, 2, 3]
    output: true

Check if Tree is Isomorphic
    input: root1: [1, 2, 3, 4, 5, 6, 7], root2: [1, 3, 2, 7, 6, 5, 4]
    output: true

Transform to Sum Tree - Done
    input: root: [10, -2, 6, 8, -4, 7, 5]
    output: 20 4 12 0 0 0 0

Invert Binary Tree - Done
    input: root: [4, 2, 7, 1, 3, 6, 9]
    output: [4, 7, 2, 9, 6, 3, 1]

Binary Tree Level Order Traversal - Done
    input: root = [3, 9, 20, null, null, 15, 7]
    output: [[3], [9, 20], [15, 7]]

Left View of Binary Tree - Done
    input: root: [1, 2, 3, 4, 5, null, 6, null, null, null, 7]
    output: [1, 2, 4, 7]

Right View of Binary Tree - Done
    input: root: [1, 2, 3, 4, 5, null, 6, null, null, null, 7]
    output: [1, 3, 6, 7]

ZigZag Tree Traversal - Done
    input: root: [1, 2, 3, 4, 5, null, 6]
    output: [[1], [3, 2], [4, 5, 6]]

Create a mirror tree from the given binary tree - Done
    input: [1, 2, 3, 4, 5, null, 6]
    output: 1 3 2 6 5 4

DP:

Longest subsequence-1 - Done
    input: [10, 9, 4, 5, 4, 8, 6]
    output: 3

Pairs with certain difference - Done
    input: arr = [1, 5, 3, 4, 2], k = 3
    output: 2

Pairs with certain difference with max sum - Done
    input: arr = [3, 5, 10, 15, 17, 12, 9], k = 4
    output: 62

Longest Repeating Subsequence - Done
    input: str = "axxzxy"
    output: 2

Permutation Coefficient - Done
    input: (10, 3)
    output: 720

Climbing Stairs - Done
    input: 5
    output: 8

Maximum difference of zeros and ones in binary string
    input: str = "11000010001"
    output: 6

Reach a given score - Done
    input: 20
    output: 4

BBT counter - Done
    input: 3
    output: 15

Knapsack with Duplicate Items - Done
    input: N = 2, W = 3, weights = [2, 1], values = [1, 1]
    output: 3

Binary Search Trees:

Kth largest element in BST - Done
    input: root: [5, 3, 6, 2, 4, null, null, 1]
    output: 4

Binary Tree to BST
    input:  [10, 30, 15, 20, null, null, 5]
    output: [5, 10, 15, 20, 30]

Check whether BST contains Dead End - Done
    input: [8, 5, 11, 2, 7, 10, null, 1]
    output: true

Minimum element in BST - Done
    input: [20, 8, 22, 4, 12]
    output: 4

Searching in Binary Search Tree (BST) - Done
    input: input: [20, 8, 22, 4, 12]
    output: true

Lowest Common Ancestor of a Binary Search Tree - Done
    input: root = [6, 2, 8, 0, 4, 7, 9, null, null, 3, 5], p = 2, q = 8
    output: 6